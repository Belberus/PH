   1              	# 1 "../funciones_asm.asm"
   1              	.text
   0              	
   0              	
   0              	
   2              	
   3              	.global sudoku_candidatos_init_arm, sudoku_candidatos_propagar_arm
   4              	
   5              	sudoku_candidatos_init_arm:
   6              	.arm
   7              	
   8              	.equ bitP, 0x8000	// Usada para devolver el bit P
   9              	.equ mascaraIni, 0x1FF	// Usada para inicializar los bits candidatos
  10              	
  11 0000 0040A0E3 		MOV r4, #0	// Contador de columnas
  12 0004 0050A0E1 		MOV r5, r0	// Direccion actual (inicial)
  13              	
  14 0008 017AA013 		MOVNE r7, #0x1000	// Primera parte de la mascara
  15 000c FF8EA013 		MOVNE r8, #0x0FF0	// Segunda parte de la mascara
  16 0010 08608711 		ORRNE r6, r7,r8		// Mascara de candidatos incial completa
  17 0014 0070A0E3 		MOV r7, #0  		// Contador de filas
  18              	
  19              	// INICIALIZA LISTA DE CANDIDATOS
  20              	for1:	
  21 0018 B090D5E1 		LDRH r9, [r5]	// Cargamos en r9 el valor de la direccion actual
  22 001c 029909E2 		AND r9, r9, $bitP	// Obtenemos el bit de P (pista)
  23 0020 020959E3 		CMP r9, $bitP 	// Comparamos para saber si lo que hay en r5 es una pista
  24              	
  25 0024 B060C511 		STRNEH r6, [r5]		// Si no es pista metemos los candidatos iniciales
  26              	
  27 0028 080054E3 		CMP r4,#8		// Comprobamos si hemos llegado a la ultima columna del tablero
  28 002c 10508502 		ADDEQ r5,r5,#16	// Si hemos completado esa fila saltamos a la siguiente
  29 0030 01708702 		ADDEQ r7,r7,#1	// Si hemos completado esa fila sumamos 1 al numero de filas recorridas
  30 0034 0040A003 		MOVEQ r4,#0		// Si hemos completado esa fila ponemos a 0 el contador de columnas recorridas
  31              	
  32 0038 01408412 		ADDNE r4,r4,#1	// Si hemos completado esa fila incrementamos el numero de columnas recorridas
  33 003c 02508512 		ADDNE r5,r5,#2	// Si hemos completado esa fila avanzamos a la siguiente posicion
  34              	
  35 0040 080057E3 		CMP r7,#8		// Comprobamos si hemos recorrido todas las filas
  36 0044 F3FFFF1A 		BNE for1		// Si no hemos recorrido todas las filas volvemos al bucle
  37              	
  38              	// RESETEAMOS LOS VALORES
  39 0048 0040A0E3 		MOV r4, #0		// Contador de columnas
  40 004c 0050A0E1 		MOV r5, r0		// Direccion actual (inicial del tablero)
  41 0050 0060A0E3 		MOV r6, #0		// Contador celdas vacias
  42 0054 0070A0E3 		MOV r7, #0  	// Contador de filas
  43              	
  44              	// RECORREMOS CELDA, SI ES PISTA PROPAGAMOS
  45              	for2:	
  46 0058 B080D5E1 		LDRH r8, [r5]	// Cargamos en r8 el valor de la direccion actual
  47 005c 028908E2 		AND r8, r8, $bitP	// Obtenemos el bit de P (pista)
  48 0060 020958E3 		CMP r8, $bitP 	// Comparamos para saber si lo que hay en r8 es una pista
  49              	
  50              		// Invocacion (si es pista)
  51 0064 0710A001 		MOVEQ r1,r7 	// r1 = filas
  52 0068 0420A001 		MOVEQ r2,r4		// r2 = columnas
  53 006c F0032D09 		PUSHEQ {r4-r9}
  54 0070 FEFFFF0B 		BLEQ sudoku_candidatos_propagar_arm	// Saltamos a propagar
  55 0074 F003BD08 		POPEQ {r4-r9}
  56              	
  57 0078 01608612 		ADDNE r6,r6,#1	// Si no es pista hacemos CeldasVacias++
  58              	
  59 007c 080054E3 		CMP r4,#8		// Comprobamos si hemos llegado a la ultima columna de la fila actual
  60 0080 0E508502 		ADDEQ r5,r5,#14	// Si hemos completado esa fila saltamos a la siguiente fila
  61 0084 01708702 		ADDEQ r7,r7,#1	// Si hemos completado esa fila sumamos 1 al numero de filas recorridas
  62 0088 0040A003 		MOVEQ r4,#0		// Si hemos completado esa fila ponemos a 0 el contador de columnas recorridas
  63              	
  64 008c 01408412 		ADDNE r4,r4,#1	// Si no hemos completado esa fila incrementamos en 1 el numero de columnas recorri
  65 0090 02508512 		ADDNE r5,r5,#2	// Si no hemos completado esa fila avanzamos a la siguiente columna
  66 0094 090057E3 		CMP r7,#9		// Comprobamos si hemos recorrido todas las filas
  67 0098 EEFFFF1A 		BNE for2		// Si no hemos recorrido todas las filas volvemos al bucle
  68              	
  69              	sudoku_candidatos_propagar_arm:
  70              	.arm
  71 009c 04E02DE5 		PUSH {lr}
  72 00a0 0040A0E3 		MOV r4,#0	// Contador de pablos
  73 00a4 8152A0E1 		MOV r5, r1, LSL #5
  74 00a8 826085E0 		ADD r6, r5, r2, LSL #1
  75 00ac 006086E0 		ADD r6,r6,r0
  76 00b0 B060D6E1 		LDRH r6, [r6]	// Cargamos el "valor"
  77              		
  78 00b4 0F6006E2 		AND r6,r6, #0x000F	// Valor
  79 00b8 0870A0E3 		MOV r7,#0x0008
  80 00bc 1775A0E1 		MOV r7,r7, LSL r5	// Mascara del valor
  81 00c0 0770E0E1 		MVN r7,r7	// Invertimos el valor
  82              	
  83 00c4 0050A0E1 		MOV r5,r0
  84              	// PROPAGAMOS POR LA FILA
  85              	forFila:
  86 00c8 B080D5E1 		LDRH r8,[r5]
  87 00cc 078008E0 		AND r8,r8,r7	// Aplicamos la mascara
  88 00d0 B080C5E1 		STRH r8,[r5]
  89              	
  90 00d4 014084E2 		ADD r4,r4,#1
  91 00d8 025085E2 		ADD r5,r5,#2
  92 00dc 090054E3 		CMP r4,#9
  93 00e0 F8FFFF1A 		BNE forFila
  94              	
  95              	// PREPARAMOS LOS VALORES
  96 00e4 0050A0E3 		MOV r5,#0
  97 00e8 025080E0 		ADD r5,r0,r2	// Nos situamos en la primera posicion de la columna 
  98              	
  99              	// PROPAGAMOS POR COLUMNA
 100              	forColum:
 101 00ec B080D5E1 		LDRH r8,[r5]
 102 00f0 078008E0 		AND r8,r8,r7	// Aplicamos la mascara
 103 00f4 B080C5E1 		STRH r8,[r5]
 104              	
 105 00f8 014084E2 		ADD r4,r4,#1
 106 00fc 205085E2 		ADD r5,r5,#32
 107 0100 090054E3 		CMP r4,#9
 108 0104 F8FFFF1A 		BNE forColum
 109              	
 110              	// PREPARAMOS LOS DATOS
 111 0108 00A0A0E3 		MOV r10,#0	// Resultado division fila
 112 010c 00B0A0E3 		MOV r11,#0	// Resultado division columna
 113 0110 07002DE9 		PUSH {r0,r1,r2}	// Guardamos los parametros para no modificarlos
 114              	
 115              	divFila:
 116 0114 030051E3 		CMP r1,#3
 117 0118 031041A2 		SUBGE r1,r1,#3
 118 011c 014084A2 		ADDGE r4,r4,#1 
 119 0120 FBFFFFAA 		BGE divFila
 120              	
 121              	divCol:
 122 0124 030052E3 		CMP r2,#3
 123 0128 032042A2 		SUBGE r2,r2,#3
 124 012c 019089A2 		ADDGE r9,r9,#1
 125 0130 FBFFFFAA 		BGE divCol
 126              	
 127 0134 0310A0E3 		MOV r1, #3
 128 0138 9A0104E0 		MUL r4,r10, r1	// Posicion inicial fila
 129 013c 9B0109E0 		MUL r9,r11, r1	// Posicion inicial columna
 130              		
 131              		// Nos situamos en la posicion inicial del Sector
 132 0140 843280E0 		ADD r3, r0, r4, LSL #5
 133 0144 893083E0 		ADD r3,r3, r9, LSL #1
 134              	
 135 0148 0700BDE8 		POP {r0,r1,r2}	// Recuperamos el valor de los parametros√ß
 136              	
 137 014c 0010A0E3 		MOV r1, #0	// Contador filas
 138 0150 0020A0E3 		MOV r2, #0	// Contador columnas
 139              	/*	
 140              		r0 cuadricula
 141              		r1 contador
 142              		r2 contador
 143              		r3 posicion inicial del cuadrante 
 144              		r7 mascara pablera ya preparado
 145              	*/
 146              	
 147              	// PROPAGAMOS POR LA REGION
 148              	forRegion:
 149 0154 B080D3E1 		LDRH r8,[r3]
 150 0158 078008E0 		AND r8,r8,r7	// Aplicamos la mascara
 151 015c B080C3E1 		STRH r8,[r3]
 152              	
 153 0160 011081E2 		ADD r1,r1,#1	// Incrementamos contador de fila	
 154 0164 030051E3 		CMP r1,#3
 155 0168 1A3083A2 		ADDGE r3,r3, #26	// Saltamos a la fila siguiente
 156 016c 0010A0A3 		MOVGE r1,#0
 157 0170 012082A2 		ADDGE r2,r2,#1
 158 0174 023083B2 		ADDLT r3,r3,#2	// Si no toca saltar fila avanzamos a la siguiente posicion
 159              	
 160 0178 030052E3 		CMP r2,#3
 161 017c F4FFFFBA 		BLT forRegion
 162              	
 163 0180 04F09DE4 		POP {pc}	// Volvemos a la rutina init
DEFINED SYMBOLS
../funciones_asm.asm:5      .text:00000000 sudoku_candidatos_init_arm
../funciones_asm.asm:69     .text:0000009c sudoku_candidatos_propagar_arm
../funciones_asm.asm:8      *ABS*:00008000 bitP
../funciones_asm.asm:9      *ABS*:000001ff mascaraIni
../funciones_asm.asm:11     .text:00000000 $a
../funciones_asm.asm:20     .text:00000018 for1
../funciones_asm.asm:45     .text:00000058 for2
../funciones_asm.asm:85     .text:000000c8 forFila
../funciones_asm.asm:100    .text:000000ec forColum
../funciones_asm.asm:115    .text:00000114 divFila
../funciones_asm.asm:121    .text:00000124 divCol
../funciones_asm.asm:148    .text:00000154 forRegion
                   .debug_aranges:0000000c $d

NO UNDEFINED SYMBOLS
