#include <stdint.h>  // for uint32_t, to get 32bit-wide rotates, regardless of the size of int.
#include <limits.h>  // for CHAR_BIT

// Para rotar a la izquierda
uint16_t rotl16 (uint16_t value, unsigned int count) {
    const unsigned int mask = (CHAR_BIT*sizeof(value)-1);
    count &= mask;
    return (value<<count) | (value>>( (-count) & mask ));
}

// Para rotar a la derecha
uint16_t rotr16 (uint16_t value, unsigned int count) {
    const unsigned int mask = (CHAR_BIT*sizeof(value)-1);
    count &= mask;
    return (value>>count) | (value<<( (-count) & mask ));



/* *****************************************************************************
 * propaga el valor de una determinada celda
 * para actualizar las listas de candidatos
 * de las celdas en su su fila, columna y regiÃ³n */
static void
sudoku_candidatos_propagar_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS],
                             uint8_t fila, uint8_t columna)
{
    /* valor que se propaga */
    uint8_t valor = celda_leer_valor(cuadricula[fila][columna]);
    /* filtro base rotado "valor" veces */
    //uint16_t filtro = (0x0008<< (valor-1));  //ponemos (valor - 1) porque sino en el caso de que valor fuera = 1 desplazaria el 1, pero el 1 no deberia desplazarse ya 
                                             //ya esta en la posicion del 1 de la ristra de candidatos. Es decir, ponemos el -1 porque en el caso del uno se desplazaria
                                             //cuando en realidad no deberia desplazarse.

    //Ahora debemos calcular el valor de la ristra 0xXXXX = valor de la cuadricula antes AND INVERSO(filtro)

    // Otra opcion es hacer la rotacion usando las funciones de arriba
    uint16_t filtro = 0xFFF7;
    uint16_t nuevoValor = rotl16(filtro, valor);    // Nos devolvera un un numero con todo 1s menos un 0 en la posicion del valor en si que estamos eliminando. Ahora
                                                    // podriamos hacer el AND entre el valor inicial y este valor obtenido y ya tendriamos el nuevo valor de la celda.


    /* recorrer fila descartando valor de listas candidatos */
    for(int i=0; i<NUM_COLUMNAS;i++){
    	cuadricula[fila][i] = (cuadricula[fila][i] & nuevoValor);
    }
    /* recorrer columna descartando valor de listas candidatos */
    for(int i=0; i<NUM_FILAS;i++){
        	cuadricula[i][columna] = (cuadricula[i][columna] & nuevoValor);
    }
    /* recorrer region descartando valor de listas candidatos */

    int cuadrante_i = i / 3;    // Nos dara el cuadrante en el eje Y en el que esta (0 = fila 1, 1 = fila 2, 2 = fila 3)
    int cuadrante_j = j / 3:    // Nos dara el cuadrante en el eje X en el que esta (0 = columna 1, 1 = columna 2, 2 = columna 3)
    int inicio_i = (cuadrante_i * 3) + 1;   // Segun el cuadrante empezaremos en una posicion u otra
    int inicio_j = (cuadrante_j * 3) + 1;   // Segun el cuadrante empezaremos en una posicion u otra

    for (int y = inicio_i; y< inicio_i +2; y++){  // Recorremos desde fila inicial (del cuadrante en cuestion) hasta fila final (del cuadrante en cuestion)
        for (int x = inicio_j; x<inicio_j +2; x++){     // Recorremos desde columna inicial (del cuadrante en cuestion) hasta columna final (del cuadrante en cuestion)
            cuadricula[y][x] = (cuadricula[y][x] & nuevoValor); // Aplicamos el filtrado como en los casos anteriores
        }
    }

}
