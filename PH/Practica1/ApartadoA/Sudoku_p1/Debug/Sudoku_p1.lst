
Sudoku_p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  0c000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  0c000120  0c000120  00008120  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  2 .ARM.attributes 0000002e  00000000  00000000  00008240  2**0
                  CONTENTS, READONLY
  3 .comment      0000002a  00000000  00000000  0000826e  2**0
                  CONTENTS, READONLY
  4 .debug_line   000001c5  00000000  00000000  00008298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000020f  00000000  00000000  0000845d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c9  00000000  00000000  0000866c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  00008738  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_macinfo 00003aae  00000000  00000000  00008778  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b0  00000000  00000000  0000c226  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000020  00000000  00000000  0000c2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000035  00000000  00000000  0000c2f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000132  00000000  00000000  0000c32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000090  00000000  00000000  0000c460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c000000 <start>:
start:
.arm    /* indicates that we are using the ARM instruction set */

#------standard initial code
# --- Setup interrupt / exception vectors
      B       Reset_Handler
 c000000:	eaffffff 	b	c000004 <Reset_Handler>

0c000004 <Reset_Handler>:
# Reset Handler:
# the processor starts executing this code after system reset
################################################################################
Reset_Handler:
#
        MOV     sp, #0x4000      /*  set up stack pointer (r13) */
 c000004:	e3a0d901 	mov	sp, #16384	; 0x4000
# If there are 4 or less parameters when calling a C function the compiler
# assumes that they have been stored in r0-r3.
# If there are more parameters you have to store them in the data stack
# using the stack pointer
# function __c_copy is in copy.c
        LDR     r0, =cuadricula  /*  puntero a la @ inicial de la cuadricula */
 c000008:	e59f000c 	ldr	r0, [pc, #12]	; c00001c <stop+0x4>

.extern     sudoku9x9
        ldr         r5, = sudoku9x9
 c00000c:	e59f500c 	ldr	r5, [pc, #12]	; c000020 <stop+0x8>
        mov         lr, pc
 c000010:	e1a0e00f 	mov	lr, pc
        bx          r5
 c000014:	e12fff15 	bx	r5

0c000018 <stop>:

stop:
        B       stop        /*  end of program */
 c000018:	eafffffe 	b	c000018 <stop>
 c00001c:	0c000120 	.word	0x0c000120
 c000020:	0c0000ec 	.word	0x0c0000ec

0c000024 <celda_leer_valor>:

/* *****************************************************************************
 * extrae el valor almacenado en los 16 bits de una celda */
static inline uint8_t
celda_leer_valor(CELDA celda)
{
 c000024:	e1a0c00d 	mov	ip, sp
 c000028:	e92dd800 	push	{fp, ip, lr, pc}
 c00002c:	e24cb004 	sub	fp, ip, #4
 c000030:	e24dd008 	sub	sp, sp, #8
 c000034:	e1a03000 	mov	r3, r0
 c000038:	e14b30be 	strh	r3, [fp, #-14]
    return (celda & 0x000F);
 c00003c:	e15b30be 	ldrh	r3, [fp, #-14]
 c000040:	e20330ff 	and	r3, r3, #255	; 0xff
 c000044:	e203300f 	and	r3, r3, #15
 c000048:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c00004c:	e1a00003 	mov	r0, r3
 c000050:	e24bd00c 	sub	sp, fp, #12
 c000054:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000058:	e12fff1e 	bx	lr

0c00005c <sudoku_candidatos_propagar_c>:
 * para actualizar las listas de candidatos
 * de las celdas en su su fila, columna y región */
static void
sudoku_candidatos_propagar_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS],
                             uint8_t fila, uint8_t columna)
{
 c00005c:	e1a0c00d 	mov	ip, sp
 c000060:	e92dd800 	push	{fp, ip, lr, pc}
 c000064:	e24cb004 	sub	fp, ip, #4
 c000068:	e24dd010 	sub	sp, sp, #16
 c00006c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c000070:	e1a03002 	mov	r3, r2
 c000074:	e1a02001 	mov	r2, r1
 c000078:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c00007c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    /* valor que se propaga */
    uint8_t valor = celda_leer_valor(cuadricula[fila][columna]);
 c000080:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c000084:	e1a03283 	lsl	r3, r3, #5
 c000088:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c00008c:	e0822003 	add	r2, r2, r3
 c000090:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c000094:	e1a03083 	lsl	r3, r3, #1
 c000098:	e0823003 	add	r3, r2, r3
 c00009c:	e1d330b0 	ldrh	r3, [r3]
 c0000a0:	e1a00003 	mov	r0, r3
 c0000a4:	ebffffde 	bl	c000024 <celda_leer_valor>
 c0000a8:	e1a03000 	mov	r3, r0
 c0000ac:	e54b300d 	strb	r3, [fp, #-13]

    /* recorrer fila descartando valor de listas candidatos */
    /* recorrer columna descartando valor de listas candidatos */
    /* recorrer region descartando valor de listas candidatos */
}
 c0000b0:	e24bd00c 	sub	sp, fp, #12
 c0000b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0000b8:	e12fff1e 	bx	lr

0c0000bc <sudoku_candidatos_init_c>:
 * calcula todas las listas de candidatos (9x9)
 * necesario tras borrar o cambiar un valor (listas corrompidas)
 * retorna el numero de celdas vacias */
static int
sudoku_candidatos_init_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS])
{
 c0000bc:	e1a0c00d 	mov	ip, sp
 c0000c0:	e92dd800 	push	{fp, ip, lr, pc}
 c0000c4:	e24cb004 	sub	fp, ip, #4
 c0000c8:	e24dd010 	sub	sp, sp, #16
 c0000cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    int celdas_vacias = 0;
 c0000d0:	e3a03000 	mov	r3, #0
 c0000d4:	e50b3010 	str	r3, [fp, #-16]
        /* si celda tiene valor */
        /*    sudoku_candidatos_propagar_c(...); */
        /* else actualizar contador de celdas vacias */

    /* retorna el numero de celdas vacias */
    return (celdas_vacias);
 c0000d8:	e51b3010 	ldr	r3, [fp, #-16]
}
 c0000dc:	e1a00003 	mov	r0, r3
 c0000e0:	e24bd00c 	sub	sp, fp, #12
 c0000e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0000e8:	e12fff1e 	bx	lr

0c0000ec <sudoku9x9>:
/* *****************************************************************************
 * programa principal del juego que recibe el tablero,
 * y la señal de ready que indica que se han actualizado fila y columna */
void
sudoku9x9(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], char *ready)
{
 c0000ec:	e1a0c00d 	mov	ip, sp
 c0000f0:	e92dd800 	push	{fp, ip, lr, pc}
 c0000f4:	e24cb004 	sub	fp, ip, #4
 c0000f8:	e24dd010 	sub	sp, sp, #16
 c0000fc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c000100:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int celdas_vacias;     //numero de celdas aun vacias

    /* calcula lista de candidatos, versión C */
    celdas_vacias = sudoku_candidatos_init_c(cuadricula);
 c000104:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c000108:	ebffffeb 	bl	c0000bc <sudoku_candidatos_init_c>
 c00010c:	e50b0010 	str	r0, [fp, #-16]

    /* verificar que la lista de candidatos calculada es correcta */
    /* cuadricula_candidatos_verificar(...) */

    /* repetir para otras versiones (C optimizado, ARM, THUMB) */
}
 c000110:	e24bd00c 	sub	sp, fp, #12
 c000114:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000118:	e12fff1e 	bx	lr
